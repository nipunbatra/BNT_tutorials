%% Setting up the path
cd ~/git/bnt_tutorial/
addpath(genpath(pwd))

%% Setting a seed for repeatibility
s = RandStream('mcg16807','Seed',0);
RandStream.setGlobalStream(s);

%% Creating the DBN node structure
intra = zeros(2);
intra(1,2) = 1; % node 1 in slice t connects to node 2 in slice t

inter=zeros(2);
inter(1,1)=1; % node 1 in slice t-1 connects to node 1 in slice t

%% Specifying the observed and hidden states
Q = 2; % num hidden states
O = 6; % num observable symbols

%% Defining equivalence classes
%% Class 1; first node- P(class1) depends on prior only
%% Class 2; observed nodes- P(class 2) depends on emission only
%% Class 3; hidden nodes- P(class 3) depends on transition only

eclass1 = [1 2];
eclass2 = [3 2];
eclass = [eclass1 eclass2];

ns = [Q O];
dnodes = 1:2;
onodes = [2];
bnet = mk_dbn(intra, inter, ns, 'discrete', dnodes,'observed',onodes, 'eclass1', eclass1, 'eclass2', eclass2);

%% Reading the CSVs generated perviously and loading them to create the
%% evidence cell array
ncases=10;
ss=2;
cases = cell(1, ncases);
T=1000;
for i=1:ncases
  cases{i} = cell(ss,T);
  filename=sprintf('data/hidden_%d.csv'
  cases{i}(onodes,:) = csvread();
end
[bnet2, LLtrace] = learn_params_dbn_em(engine, cases, 'max_iter', 4);



